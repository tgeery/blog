{% extends "generic.html" %}

{% block header %}
{{ entry.title }}
{% endblock %}

{% load static %}
{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
{% block content %}
<p>This entry describes building a yocto project for <a href="https://raspinterest.wordpress.com/2016/11/30/yocto-project-on-raspberry-pi-3/">Raspberry Pi</a> and a simple custom recipe.</p>
<h1>Clone Repositories</h1>
<pre><code class="bash">git clone git://git.yoctoproject.org/poky
git clone git://git.openembedded.org/meta-openembedded
git clone git://git.yoctoproject.org/meta-raspberrypi
cd poky
source oe-init-build-env rpi-build</code></pre>
<h1>Set Platform Configs</h1>
<p>Modify conf/local.conf</p>
<pre><code class="bash">echo 'MACHINE = "raspberrypi3"' >> conf/local.conf
echo 'PREFERRED_VERSION_linux-raspberrypi = "4.%"' >> conf/local.conf
echo 'DISTRO_FEATURES_remove = "x11 wayland"' >> conf/local.conf
echo 'DISTRO_FEATURES_append = " systemd"' >> conf/local.conf
echo 'VIRTUAL-RUNTIME_init_manager = "systemd"' >> conf/local.conf
IMAGE_FSTYPES = "tar.xz ext3 rpi-sdimg"</code></pre>
<p>Modify conf/bblayers.conf</p>
<pre><code class="bash">
POKY_BBLAYERS_CONF_VERSION = "2"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  /home/<user>/develop/poky/meta \
  /home/<user>/develop/poky/meta-poky \
  /home/<user>/develop/poky/meta-yocto-bsp \
  /home/<user>/develop/poky/meta-openembedded/meta-oe \
  /home/<user>/develop/poky/meta-openembedded/meta-python \
  /home/<user>/develop/poky/meta-openembedded/meta-multimedia \
  /home/<user>/develop/poky/meta-raspberrypi \
  /home/<user>/develop/poky/meta-mytest \
  "</code></pre>
<h1>Build Custom Recipe</h1>
<p>Create recipe directory</p>
<pre><code class="bash">cd ..
mkdir meta-mytest
cd meta-mytest</code></pre>
<p>Create mytest.h</p>
<pre><code class="cpp">#if HAVE_CONFIG_H
#include <config.h>
#endif</code></pre>
<p>Create mytest.c</p>
<pre><code class="cpp>#include <stdio.h>

int main() {
    printf("Did this work? On Feb 2\n");
    return 0;
}</code></pre>
<p>Create configure.ac</p>
<pre><code class="bash">AC_INIT(MyTest, 1.0)
AM_INIT_AUTOMAKE([-Wall -Werror])
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SRCDIR(MyTest.c)
AC_CONFIG_FILES([Makefile])
AC_OUTPUT</code></pre>
<p>Create Makefile.am</p>
<pre><code class="bash">AUTOMAKE_OPTIONS = foreign

CFLAGS = -Wall -pedantic
include_HEADERS = mytest.h

bin_PROGRAMS = mytest
mytest_SOURCES = mytest.c</code></pre>
<h1>Install to SD Card</h1>
<pre><code class="bash">sudo apt-get install bmap-tools
sudo umount /media/<user>/rootfs
sudo bmaptool copy --bmap tmp/deploy/images/raspberrypi3/rpi-basic-image-raspberrypi3-20210202104541.rootfs.wic.bmap tmp/deploy/images/raspberrypi3/rpi-basic-image-raspberrypi3-20210202104541.rootfs.wic.bz2 /dev/sdb
cp tmp/deploy/rpm/cortexa7t2hf_neon_vfpv4/mytest-1.0-r0.cortexa7t2hf_neon_vfpv4.rpm /media/<user>/rootfs/home/pi/</code></pre>
{% endblock %}
